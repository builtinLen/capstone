{"version":3,"sources":["StateProvider.js","common/useSessionStorage.js","UserContext.js","common/api.js","common/auth.js","pages/Login.js","components/header/Searchbar.js","components/header/LibraryNav.js","components/header/Header.js","components/sidebar/SidebarOption.js","components/sidebar/SlidingPane.js","components/sidebar/Sidebar.js","components/footer/Slider.js","components/footer/Footer.js","components/cards/PlaylistCardS.js","components/cards/PlaylistCardM.js","pages/Home.js","data/searchcards.js","components/cards/SearchPageCard.js","components/cards/SongCard.js","pages/Search.js","components/cards/InfoCard.js","pages/Library.js","components/playlist/EditPlaylistForm.js","components/playlist/PlaylistControls.js","components/playlist/Song.js","components/playlist/SongList.js","pages/Playlist.js","pages/DiscoverPlaylist.js","pages/NotFound404.js","Routes.js","App.js","serviceWorker.js","common/reducer.js","index.js"],"names":["StateContext","createContext","StateProvider","_ref","reducer","initialState","children","React","createElement","Provider","value","useReducer","useStateValue","useContext","useSessionStorage","key","initialValue","arguments","length","undefined","valueFromSessionStorage","sessionStorage","getItem","setValue","useState","useEffect","removeItem","setItem","UserContext","BASE_URL","process","REACT_APP_BASE_URL","SpotifyCloneApi","endpoint","data","method","console","debug","url","concat","headers","Authorization","token","params","axios","err","error","response","this","request","user","playlist","playlists","handle","id","song","playlistID","songKey","count","total_songs","album","albums","artist","artists","state","result","characters","charactersLength","i","charAt","Math","floor","random","generateRandomString","getAccessToken","async","post","join","Login","history","useHistory","dispatch","className","src","alt","onClick","res","access_token","expires_in","token_type","type","push","title","Searchbar","searchFor","searchText","setSearchText","onSubmit","evt","preventDefault","searchTerm","trim","searchResults","e","alert","TextField","placeholder","onChange","target","InputProps","style","border","alignItems","backgroundColor","color","borderRadius","minWidth","width","height","padding","margin","disableUnderline","startAdornment","InputAdornment","position","SearchIcon","LibraryNav","path","map","item","NavLink","to","exact","activeClassName","Header","logout","location","useLocation","isHovering","setIsHovering","handleMouseOver","goBack","ArrowForwardIosIcon","goForward","pathname","startsWith","onMouseEnter","onMouseLeave","Avatar","images","display_name","href","SidebarOption","Icon","img","fontSize","SlidingPanel","isClicked","setIsClicked","handleClick","marginTop","SlidingPane","isOpen","from","onRequestClose","rel","Sidebar","_playlists$","playlistsCount","INITIAL_DATA","name","description","username","image","HomeIcon","LibraryMusicIcon","newPlaylist","updatedPlaylists","getPlaylists","AddBoxIcon","FavoriteIcon","Slider","minValue","maxValue","handleChange","Fragment","min","max","data-testid","Footer","isPlaying","isShuffling","isRepeated","volume","trackData","playerTime","getSongDuration","togglePause","duration_ms","timerId","setInterval","clearInterval","explicit","ExplicitIcon","artist_name","ShuffleIcon","toggleShuffle","SkipPreviousIcon","PauseCircleFilledIcon","PlayCircleFilledIcon","SkipNextIcon","RepeatIcon","toggleRepeat","parseInt","Grid","container","spacing","PlaylistPlayIcon","VolumeOffIcon","unMute","volumeLevelBeforeMute","JSON","parse","VolumeDownIcon","handleMute","xs","stringify","PlaylistCardS","Link","PlaylistCardM","Home","slice","SEARCHCARDS","bgcolor","imgurl","SearchPageCard","cardData","SongCard","handleAlert","spotify","SpotifyWebApi","liked","setLike","isDivActive","setIsDivActive","addToPlaylistRef","useRef","artistImg","setArtistImg","songData","artist_id","album_id","albumData","release_date","artistData","playSongData","toggleLike","handleClickOutside","current","contains","document","addEventListener","removeEventListener","FavoriteBorderIcon","getArtist","handleMoreClick","MoreHorizIcon","ref","totalSongs","getSongCount","addArtist","addAlbum","addSong","addSongToPlaylist","Alert","forwardRef","props","MuiAlert","Object","assign","elevation","variant","Search","_searchResults$tracks","_searchResults$tracks2","open","setOpen","handleClose","event","reason","tracks","items","songs","card","total","Stack","sx","Snackbar","autoHideDuration","onClose","anchorOrigin","vertical","horizontal","severity","bottom","InfoCard","PlaylistTab","PodcastTab","ArtistTab","AlbumTab","Library","Route","EditPlaylistForm","closeModal","INITIAL_STATE","formData","setFormData","playlistData","toLowerCase","split","replace","savePlaylist","maxLength","autoComplete","autoFocus","required","PlaylistControls","handleSort","sortOption","modalOpen","setModalOpen","seIsClicked","openModal","window","confirm","deletePlaylist","log","m","label","disabled","Song","track","removeSong","daysAgo","numOfDays","added_at","Date","formatDate","dateString","date","month","getMonth","day","getDate","year","getFullYear","album_name","days","SongList","AccessTimeIcon","sortedData","sort","a","b","localeCompare","setSong","Playlist","_playlist$user","_playlist$user2","_playlist$user3","_playlist$user4","useParams","setPlaylist","isLoading","setIsLoading","setSortOption","getPlaylist","body","cursor","getPlaylistDetails","profile_url","removeSongFromPlaylist","go","_discover_weekly$trac","discover_weekly","NotFound404","NewReleasesRoundedIcon","Routes","Switch","DiscoverPlaylist","App","accessToken","setAccessToken","timestamp","setTimestamp","infoLoaded","setInfoLoaded","fetchData","now","then","getArtists","getAlbums","BrowserRouter","ms","minutes","seconds","toFixed","dateAdded","currentDate","date1","diffInTime","getTime","round","results","searchTracks","Error","clear","Boolean","hostname","match","action","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.664def2a.chunk.js","sourcesContent":["import React, { createContext, useContext, useReducer } from 'react';\n\n/** Context: provides data object and setter for use throughout app.\n * useContext is useful for providing data that is global to the application and that is not modified within the component tree\n * useReducer is useful for managing local state that is modified within the component tree, or for encapsulating complex update logic\n */\n\nexport const StateContext = createContext();\n\nexport const StateProvider = ({ reducer, initialState, children }) => (\n  <StateContext.Provider value={useReducer(reducer, initialState)}>\n    {children}\n  </StateContext.Provider>\n);\n\nexport const useStateValue = () => useContext(StateContext);\n","import { useState, useEffect } from 'react';\n\n/** Custom hook for keeping state data synced with sessionStorage.\n *\n * This creates `item` as state and look in sessionStorage for current value\n * (if not found, defaults to `firstValue`)\n *\n * When `item` changes, effect re-runs:\n * - if new state is null, removes from sessionStorage\n * - else, updates sessionStorage\n *\n * To the component, this just acts like state that is also synced to/from\n * sessionStorage::\n *\n *   const [myThing, setMyThing] = useSessionStorage(\"myThing\")\n */\n\nconst useSessionStorage = (key, initialValue = null) => {\n  const valueFromSessionStorage = sessionStorage.getItem(key) || initialValue;\n\n  const [value, setValue] = useState(valueFromSessionStorage);\n\n  useEffect(() => {\n    // console.debug('hooks useSessionStorage useEffect', 'value=', value);\n    if (value === null) {\n      sessionStorage.removeItem(key);\n    } else {\n      sessionStorage.setItem(key, value);\n    }\n  }, [key, value]);\n\n  return [value, setValue];\n};\n\nexport default useSessionStorage;\n","import React from 'react';\n\n/** Context: provides currentUser object and setter for it throughout app. */\n\nconst UserContext = React.createContext();\n\nexport default UserContext;\n","import axios from 'axios';\n\nconst BASE_URL = process.env.REACT_APP_BASE_URL || 'http://localhost:3001';\n\n/** API Class.\n *\n * Static class tying together methods used to get/send to the API.\n * There shouldn't be any frontend-specific stuff here, and there shouldn't\n * be any API-aware stuff elsewhere in the frontend.\n *\n */\n\nclass SpotifyCloneApi {\n  static async request(endpoint, data = {}, method = 'get') {\n    console.debug('API Call:', endpoint, data, method);\n\n    // passes authorization token in the header\n    const url = `${BASE_URL}/${endpoint}`;\n    const headers = { Authorization: `Bearer ${SpotifyCloneApi.token}` };\n    const params = method === 'get' ? data : {};\n\n    try {\n      return (await axios({ url, method, data, headers, params })).data;\n    } catch (err) {\n      console.error('API Error:', err.response);\n    }\n  }\n\n  /*********************** Individual API routes **********************/\n\n  /** Add newly logged in user ***************************\n   * for when Spotify Auth is allowed for personal logins > App.js\n   */\n  static async addNewUser(data) {\n    let res = await this.request('users', data, 'post');\n    return res.user;\n  }\n\n  /*********************** PLAYLISTS **********************/\n  /** Add playlist to db */\n  static async newPlaylist(data) {\n    let res = await this.request('playlists', data, 'post');\n    return res.playlist;\n  }\n\n  /** Get playlists */\n  static async getPlaylists() {\n    let res = await this.request('playlists');\n    return res.playlists;\n  }\n\n  /** Get details on a playlist by handle. */\n  static async getPlaylist(handle) {\n    let res = await this.request(`playlists/${handle}`);\n    return res.playlist;\n  }\n\n  /** Save playlist details edits. */\n  static async savePlaylist(handle, data) {\n    let res = await this.request(`playlists/${handle}`, data, 'patch');\n    return res.playlist;\n  }\n\n  /** Delete playlist */\n  static async deletePlaylist(id) {\n    await this.request(`playlists/${id}`, {}, 'delete');\n  }\n\n  /*********************** SONGS **********************/\n  /** Add song to db */\n  static async addSong(data) {\n    let res = await this.request('songs', data, 'post');\n    return res.song;\n  }\n\n  /** Save song to playlist by playlistID. */\n  static async addSongToPlaylist(playlistID, songKey) {\n    let res = await this.request(\n      `playlists/${playlistID}/songs/${songKey}`,\n      {},\n      'post'\n    );\n    return res.song;\n  }\n\n  /** Get song count */\n  static async getSongCount() {\n    let res = await this.request('songs');\n    return +res.count.total_songs;\n  }\n\n  /** Delete song from playlist by id */\n  static async removeSongFromPlaylist(playlistID, songKey) {\n    await this.request(`playlists/${playlistID}/song/${songKey}`, {}, 'delete');\n  }\n\n  /*********************** ALBUMS **********************/\n  /** Add album to db */\n  static async addAlbum(data) {\n    let res = await this.request('albums', data, 'post');\n    return res.album;\n  }\n\n  /** Get albums */\n  static async getAlbums() {\n    let res = await this.request('albums');\n    return res.albums;\n  }\n\n  /** Get details on an album by id. */\n  // static async getAlbum(id) {\n  //   let res = await this.request(`albums/${id}`);\n  //   return res.album;\n  // }\n\n  /*********************** ARTISTS **********************/\n  /** Add artist to db */\n  static async addArtist(data) {\n    let res = await this.request('artists', data, 'post');\n    return res.artist;\n  }\n\n  /** Get artists */\n  static async getArtists() {\n    let res = await this.request('artists', {});\n    return res.artists;\n  }\n\n  /** Get details on an artist by id. */\n  // static async getArtist(id) {\n  //   let res = await this.request(`artists/${id}`);\n  //   return res.artist;\n  // }\n}\n\nexport default SpotifyCloneApi;\n","// https://developer.spotify.com/documentation/general/guides/authorization/implicit-grant/\nimport axios from 'axios';\nconst authEndpoint = 'https://accounts.spotify.com/authorize';\n// const redirectUri = 'http://localhost:3000/';\nconst redirectUri = 'http://lennyscapstoncelone.surge.sh/';\nconst clientId = 'd357a25eff754e449e6ad19ca67978f5';\nconst scopes = ['user-read-private'];\nconst state = generateRandomString(16);\n\n/** generates a random string for 'state' o ensure that the request and response originated in the same browser.\n * This provides protection against attacks such as cross-site request forgery\n * assurance that an incoming connection is the result of an authentication request */\nfunction generateRandomString(length) {\n  var result = '';\n  var characters =\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  var charactersLength = characters.length;\n  for (var i = 0; i < length; i++) {\n    result += characters.charAt(Math.floor(Math.random() * charactersLength));\n  }\n  return result;\n}\n\n// get key:value of params and decode\nexport const getParamsFromUrl = () => {\n  return window.location.hash\n    .substring(1) // get first substring\n    .split('&')\n    .reduce((initial, item) => {\n      let parts = item.split('=');\n      initial[parts[0]] = decodeURIComponent(parts[1]);\n      return initial;\n    }, {});\n};\n\nexport const getAccessToken = async () => {\n  const res = await axios.post(\n    'https://accounts.spotify.com/api/token',\n    'grant_type=client_credentials',\n    {\n      headers: {\n        Authorization:\n          'Basic ZDM1N2EyNWVmZjc1NGU0NDllNmFkMTljYTY3OTc4ZjU6Njk3ODM2OGQwOTY5NDUxM2JkNjBmMjY3ZmU5OWYxN2Q='\n      }\n    }\n  );\n  return res.data;\n};\ngetAccessToken();\n\n/** returns access_token, token_type, expires_in, state */\nexport const loginUrl = `${authEndpoint}?client_id=${clientId}&scopes=${scopes.join(\n  '%20'\n)}&redirect_uri=${redirectUri}&response_type=token&show_dialog=true&state=${state}`;\n","import React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useStateValue } from '../StateProvider';\nimport { getAccessToken } from '../common/auth';\nimport './Login.css';\n\n/** NOT USED */\n\nconst Login = () => {\n  const history = useHistory();\n  const [{}, dispatch] = useStateValue();\n\n  const onLogin = async () => {\n    try {\n      const res = await getAccessToken();\n      sessionStorage.setItem('spotify_access_token', res.access_token);\n      sessionStorage.setItem('spotify_expires_in', res.expires_in);\n      sessionStorage.setItem('spotify_token_type', res.token_type);\n      dispatch({ type: 'SET_TOKEN', token: res.access_token });\n    } catch (error) {\n      console.error(error);\n    } finally {\n      history.push('/');\n    }\n  };\n\n  return (\n    <div className=\"Login\">\n      {/* Spotify Logo */}\n      <div className=\"Spotify-logo\">\n        <img\n          src=\"https://storage.googleapis.com/pr-newsroom-wp/1/2018/11/Spotify_Logo_RGB_White.png\"\n          alt=\"\"\n        />\n      </div>\n      {/* Login with spotify button or proceed with demo*/}\n      <div className=\"Login-options\">\n        {/* <a href={loginUrl}>Login with Spotify</a> */}\n        <button onClick={onLogin} title=\"*uses a generic account\">\n          Login\n        </button>\n        {/* <a href={'/'} title=\"*you won't be able to add songs to playlists\">\n          Browse without logging in\n        </a> */}\n      </div>\n    </div>\n  );\n};\n\nexport default Login;\n","import React, { useState, useContext } from 'react';\nimport UserContext from '../../UserContext';\nimport { useStateValue } from '../../StateProvider';\nimport TextField from '@material-ui/core/TextField';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport SearchIcon from '@material-ui/icons/Search';\n\n/** Form for sending requests to Spotify API\n *\n * returns songs relevant to search term\n *\n * - useState: state variables in functional components\n * - useStateValue: access globally stored state\n * - useContext: common data that can be accessed throughout the component hierarchy without passing the props down manually to each level\n *\n * App -> Routes -> Home/Library/Sidebar -> Playlist\n */\n\nconst Searchbar = () => {\n  const [{ token }, dispatch] = useStateValue();\n  const { searchFor } = useContext(UserContext);\n  const [searchText, setSearchText] = useState('');\n\n  // console.debug('Searchbar','searchFor=', searchFor, 'searchText=', searchText);\n\n  /** Update form fields */\n  const handleChange = evt => {\n    setSearchText(evt.target.value);\n  };\n\n  /** Tell parent to filter */\n  const handleSubmit = evt => {\n    evt.preventDefault();\n    dispatch({\n      type: 'SET_SEARCHTERM',\n      searchTerm: searchText\n    });\n\n    // take care of accidentally trying to search for just spaces\n    searchFor(searchText.trim() || undefined);\n    setSearchText(searchText.trim());\n\n    // clear search results\n    dispatch({\n      type: 'SET_SEARCH_RESULTS',\n      searchResults: []\n    });\n  };\n\n  return (\n    <div>\n      <form\n        onSubmit={\n          token\n            ? handleSubmit\n            : e => {\n                e.preventDefault();\n                alert('You must be logged in to do that');\n              }\n        }\n      >\n        <TextField\n          type=\"text\"\n          placeholder={\n            token\n              ? 'Search for Songs, Artists, or Albums'\n              : 'You must login in order to search for songs'\n          }\n          value={searchText}\n          onChange={handleChange}\n          InputProps={{\n            style: {\n              border: 'none',\n              alignItems: 'center',\n              backgroundColor: 'white',\n              color: 'black',\n              borderRadius: '30px',\n              minWidth: '80px',\n              width: '25vw',\n              height: '2.5em',\n              padding: '10px',\n              margin: '5px 10px'\n            },\n            disableUnderline: true,\n            startAdornment: (\n              <InputAdornment position=\"start\">\n                <SearchIcon />\n              </InputAdornment>\n            )\n          }}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default Searchbar;\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport './LibraryNav.css';\n\n/** Renders nav bar in /library\n * *\n * App -> Routes -> Library -> Header\n */\n\nconst LibraryNav = () => {\n  const LIBRARYTABS = [\n    { title: 'Playlists', path: '/library' },\n    { title: 'Podcasts', path: '/library/podcasts' },\n    { title: 'Artists', path: '/library/artists' },\n    { title: 'Albums', path: '/library/albums' }\n  ];\n\n  return (\n    <nav className=\"TabNav\">\n      {LIBRARYTABS.map(item => {\n        return (\n          <NavLink\n            key={item.title}\n            className=\"tabBtn\"\n            to={item.path}\n            exact\n            activeClassName=\"activeTabBtn\"\n          >\n            <h3>{item.title}</h3>\n          </NavLink>\n        );\n      })}\n    </nav>\n  );\n};\n\nexport default LibraryNav;\n","import React, { useContext, useState } from 'react';\nimport { useLocation, useHistory } from 'react-router-dom';\nimport { useStateValue } from '../../StateProvider';\nimport UserContext from '../../UserContext';\n// import { loginUrl } from '../../common/auth';\nimport Searchbar from './Searchbar';\nimport LibraryNav from './LibraryNav';\nimport './Header.css';\n\nimport ArrowForwardIosIcon from '@material-ui/icons/ArrowForwardIos';\nimport { Avatar } from '@material-ui/core';\n\n/** Is rendered on every page (except login)\n *\n * - useState: state variables in functional components\n * - useHistory: lets you access the history instance used by React Router, useful for redirecting users to another page\n * - useStateValue: access globally stored state\n * - useContext: common data that can be accessed throughout the component hierarchy without passing the props down manually to each level\n * - useLocation: returns the current URL and is immutable\n *\n *  */\n\nconst Header = () => {\n  const [{ token, user }] = useStateValue();\n  const { logout } = useContext(UserContext);\n  const location = useLocation();\n  const history = useHistory();\n  const [isHovering, setIsHovering] = useState(false);\n\n  // console.debug('Header', 'user=', user, 'location=', location, 'history=', history);\n\n  const goBack = () => {\n    history.goBack();\n  };\n\n  const goForward = () => {\n    history.goForward();\n  };\n\n  const handleMouseOver = () => {\n    let toggle = isHovering === true ? false : true;\n    setIsHovering(toggle);\n  };\n\n  return (\n    <div className=\"Header\">\n      <div className=\"Header-left\">\n        {/* Back/Fwd Navigation */}\n        <button onClick={goBack}>\n          <ArrowForwardIosIcon className=\"back-btn\" />\n        </button>\n        <button onClick={goForward}>\n          <ArrowForwardIosIcon className=\"forward-btn\" />\n        </button>\n        {/* ONLY SHOW SEARCH BAR ON SEARCH ROUTE */}\n        {location.pathname === '/search' ? (\n          <Searchbar className=\"Header-searchbar\" />\n        ) : null}\n        {location.pathname.startsWith('/library') ? <LibraryNav /> : null}\n      </div>\n\n      <div className=\"Header-right\">\n        {!token ? (\n          <a\n            href=\"/welcome\"\n            // onClick={loginUrl}\n            title=\"Login with your spotify to search for songs and them to playlists!\"\n          >\n            Login\n          </a>\n        ) : (\n          <div\n            className=\"Header-avatar\"\n            onMouseEnter={handleMouseOver}\n            onMouseLeave={handleMouseOver}\n          >\n            <Avatar src={user?.images[0].url} alt={user?.display_name} />\n            {isHovering && (\n              <div className=\"Header-logout\">\n                <button title=\"Add to this playlist\" onClick={logout}>\n                  Logout\n                </button>\n              </div>\n            )}\n            <h4>{user ? user.display_name : 'testuser'}</h4>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Header;\n","import React from 'react';\nimport './SidebarOption.css';\n\n/** Reusable component for rendering sidebar navigation\n *\n * App -> Routes -> Sidebar -> SidebarOption\n */\n\nconst SidebarOption = ({ title, Icon, img }) => {\n  // console.debug('Sidebar', 'title=', title, 'Icon=', Icon, 'img=', img);\n\n  return (\n    <div className=\"SidebarOption\">\n      {Icon && <Icon className=\"SidebarOption-icon\" fontSize=\"medium\" />}\n      {img && (\n        <img src={img} alt=\"Liked Songs Icon\" className=\"SidebarOption-liked\" />\n      )}\n      {Icon || img ? <h4>{title}</h4> : <p>{title}</p>}\n    </div>\n  );\n};\n\nexport default SidebarOption;\n","import React, { useState } from 'react';\nimport SlidingPane from 'react-sliding-pane';\nimport 'react-sliding-pane/dist/react-sliding-pane.css';\nimport './SlidingPane.css';\n\nconst SlidingPanel = () => {\n  const [isClicked, setIsClicked] = useState(false);\n\n  const handleClick = () => {\n    setIsClicked(isClicked ? false : true);\n  };\n\n  return (\n    <div className=\"SlidingPanel\">\n      <div style={{ marginTop: '1em' }}>\n        <button onClick={handleClick}>\n          {isClicked === false ? 'Click Here!' : 'Close'}\n        </button>\n      </div>\n\n      <SlidingPane\n        className=\"Pop-out-slider\"\n        isOpen={isClicked}\n        title=\"Spotify Web Player Clone\"\n        from=\"left\"\n        width=\"18em\"\n        onRequestClose={handleClick}\n      >\n        <div className=\"Pop-out-slider-content\">\n          <p>\n            *made by\n            <a\n              href=\"https://github.com/builtinlen\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              {' '}\n              Lenny Rodriguez\n            </a>\n          </p>\n          <br />\n\n          <a\n            href=\"https://github.com/builtinLen/capstone\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            {' '}\n            Github Repo\n          </a>\n\n          <div className=\"Pop-out-slider-links\">\n            <a\n              href=\"www.linkedin.com/in/lennyrodriguez000\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              <img\n                src=\"https://cdn-icons-png.flaticon.com/512/174/174857.png\"\n                alt=\"LinkedIn\"\n                title=\"LinkedIn\"\n                width=\"30px\"\n                height=\"30px\"\n              />\n            </a>\n            <a\n              href=\"https://github.com/builtinlen\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              <img\n                src=\"https://www.nicepng.com/png/full/52-520535_free-files-github-github-icon-png-white.png\"\n                alt=\"GitHub\"\n                title=\"GitHub\"\n                width=\"30px\"\n                height=\"30px\"\n              />\n            </a>\n          </div>\n\n          <p>\n            Application data sourced from{' '}\n            <a\n              href=\"https://developer.spotify.com/documentation/web-api/\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Spotify API\n            </a>\n          </p>\n          <br />\n\n          <p>PLAYER DOES NOT ACTUALLY PLAY MUSIC</p>\n          <br />\n          <br />\n\n          <p>\n            *This application is not produced, endorsed, supported, or\n            affiliated with Spotify or its affiliated companies\n          </p>\n          <br />\n          <br />\n        </div>\n      </SlidingPane>\n    </div>\n  );\n};\n\nexport default SlidingPanel;\n","import React from 'react';\nimport { useStateValue } from '../../StateProvider';\nimport { NavLink } from 'react-router-dom';\nimport SpotifyCloneApi from '../../common/api';\n// import NewPlaylistForm from './NewPlaylistForm'; // for pop-out modal (not used)\nimport SidebarOption from './SidebarOption';\nimport SlidingPanel from './SlidingPane';\nimport './Sidebar.css';\n\nimport HomeIcon from '@material-ui/icons/Home';\nimport SearchIcon from '@material-ui/icons/Search';\nimport LibraryMusicIcon from '@material-ui/icons/LibraryMusic';\nimport AddBoxIcon from '@material-ui/icons/AddBox';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\n\n/** Is rendered on every page (except login)\n *\n * - useStateValue: access globally stored state\n *\n *  */\n\nconst Sidebar = () => {\n  const [{ playlists, token, user }, dispatch] = useStateValue();\n  const playlistsCount = playlists[0]?.id;\n  // const [showModal, setShowModal] = useState(false);\n\n  // console.debug('Sidebar', 'playlists=', playlists, 'user=', user);\n\n  /** Initialize default values for new playlist */\n  const INITIAL_DATA = {\n    name: `My Playlist #${playlistsCount + 1}`,\n    description: '',\n    username: user?.id || 'testuser',\n    image:\n      'https://assets.audiomack.com/jojo-1264/82a10a07eff76040ec325e3498c6d6c7.jpeg?type=song&width=280&height=280&max=true'\n  };\n\n  // const openModal = () => {\n  //   setShowModal(true);\n  // };\n  // const closeModal = () => {\n  // setShowModal(false);\n  // };\n\n  const createNewPlaylist = async evt => {\n    evt.preventDefault();\n\n    try {\n      /** Makes a POST request to Api.js to create new playlist */\n      await SpotifyCloneApi.newPlaylist(INITIAL_DATA);\n      // Fetch updated list of playlists\n      const updatedPlaylists = await SpotifyCloneApi.getPlaylists();\n      dispatch({\n        type: 'SET_PLAYLISTS',\n        playlists: updatedPlaylists\n      });\n      // Redirect to newly-made playlist\n      // history.push(`/playlists/${result.handle}`);\n    } catch (err) {\n      console.error(err);\n      return;\n    }\n  };\n\n  return (\n    <div className=\"Sidebar\">\n      <SlidingPanel />\n      <div className=\"Sidebar-nav\">\n        <img\n          className=\"Sidebar-logo\"\n          src=\"https://storage.googleapis.com/pr-newsroom-wp/1/2018/11/Spotify_Logo_RGB_White.png\"\n          alt=\"sidebar_logo\"\n        />\n        <NavLink to=\"/\">\n          <SidebarOption title=\"Home\" Icon={HomeIcon} />\n        </NavLink>\n        <NavLink to=\"/search\">\n          <SidebarOption title=\"Search\" Icon={SearchIcon} />\n        </NavLink>\n        <NavLink to=\"/library\">\n          <SidebarOption title=\"Your Library\" Icon={LibraryMusicIcon} />\n        </NavLink>\n        <br />\n        <button onClick={createNewPlaylist}>\n          <SidebarOption title=\"Create Playlist\" Icon={AddBoxIcon} />\n        </button>\n        <SidebarOption\n          title=\"Liked Songs\"\n          Icon={FavoriteIcon}\n          img=\"https://community.spotify.com/t5/image/serverpage/image-id/104727iC92B541DB372FBC7/image-size/large?v=v2&px=999\"\n        />\n      </div>\n\n      {/* extract items value from returned playlist object and map over playlist names \n      usees optional chaining*/}\n      <div className=\"Sidebar-playlists\">\n        {playlists?.map(playlist => (\n          <NavLink to={`/playlists/${playlist.handle}`} key={playlist.id}>\n            <SidebarOption title={playlist.name} />\n          </NavLink>\n        ))}\n        {token && (\n          <NavLink to={`/playlist/discover`}>\n            <SidebarOption title=\"Discover Weekly\" />\n          </NavLink>\n        )}\n      </div>\n      {/* {showModal ? (\n        <div>\n          <NewPlaylistForm closeModal={closeModal} />\n        </div>\n      ) : null} */}\n    </div>\n  );\n};\n\nexport default Sidebar;\n","import React from 'react';\nimport './Slider.css';\n\n/** Reusable component used for volume and music scrubber range slider\n *\n * App -> Routes -> Footer -> Slider\n */\n\nconst Slider = ({ value, minValue, maxValue, handleChange }) => {\n  // console.debug('Slider','value',value, 'minValue',minValue, 'maxValue',maxValue, 'handleChange',handleChange)\n\n  return (\n    <>\n      <input\n        className=\"slider\"\n        key=\"volume-slider\"\n        type=\"range\"\n        name=\"volume\"\n        value={value}\n        min={minValue}\n        max={maxValue}\n        onChange={handleChange}\n        data-testid=\"slider\"\n      />\n    </>\n  );\n};\n\nexport default Slider;\n","import React, { useContext, useEffect } from 'react';\nimport UserContext from '../../UserContext';\nimport { useStateValue } from '../../StateProvider';\nimport Slider from './Slider';\nimport './Footer.css';\n\nimport ExplicitIcon from '@material-ui/icons/Explicit';\nimport PlayCircleFilledIcon from '@material-ui/icons/PlayCircleFilled';\nimport SkipPreviousIcon from '@material-ui/icons/SkipPrevious';\nimport SkipNextIcon from '@material-ui/icons/SkipNext';\nimport ShuffleIcon from '@material-ui/icons/Shuffle';\nimport RepeatIcon from '@material-ui/icons/Repeat';\nimport VolumeOffIcon from '@material-ui/icons/VolumeOff';\nimport VolumeDownIcon from '@material-ui/icons/VolumeDown';\nimport PauseCircleFilledIcon from '@material-ui/icons/PauseCircleFilled';\nimport PlaylistPlayIcon from '@material-ui/icons/PlaylistPlay';\nimport { Grid } from '@material-ui/core';\n\n/** Is rendered on every page (except login)\n *\n * - useStateValue: access globally stored state\n * - useContext: common data that can be accessed throughout the component hierarchy without passing the props down manually to each level\n *\n *  */\n\nconst Footer = () => {\n  const [\n    { isPlaying, isShuffling, isRepeated, volume, trackData, playerTime },\n    dispatch\n  ] = useStateValue();\n  const { getSongDuration } = useContext(UserContext);\n\n  // console.debug( 'Footer', 'isPlaying=', isPlaying,'volume=',volume, 'trackData=', trackData, 'playerTime=', playerTime );\n\n  /** SET PLAY/PAUSE/SHUFFLE/REPEAT GLOBALLY */\n  const togglePause = () => {\n    if (isPlaying && !trackData) {\n      alert(\n        \"Pick a song first to start playing! \\n **Doesn't actually play sound**\"\n      );\n    }\n    if (playerTime > trackData?.duration_ms) {\n      dispatch({\n        type: 'SET_PLAYER_TIMELINE',\n        playerTime: 0\n      });\n      dispatch({\n        type: 'SET_PLAYING',\n        isPlaying: true\n      });\n    }\n    dispatch({\n      type: 'SET_PLAYING',\n      isPlaying: !isPlaying\n    });\n  };\n  const toggleShuffle = () => {\n    dispatch({\n      type: 'SET_SHUFFLING',\n      isShuffling: !isShuffling\n    });\n  };\n  const toggleRepeat = () => {\n    dispatch({\n      type: 'SET_REPEATED',\n      isRepeated: !isRepeated\n    });\n  };\n\n  /** SAVE SONG TIME GLOBALLY */\n  const handleTimeline = evt => {\n    dispatch({\n      type: 'SET_PLAYER_TIMELINE',\n      playerTime: parseInt(evt.target.value)\n    });\n  };\n\n  /** SETS VOLUME GLOBALLY\n   * Saves volume before setting to 0\n   * allows input to toggle mute/unmute by saving volume to sessionStorage\n   */\n  const handleVolume = evt => {\n    dispatch({\n      type: 'SET_VOLUME',\n      volume: parseInt(evt.target.value)\n    });\n    sessionStorage.setItem('unMuteVariable', JSON.stringify(evt.target.value));\n  };\n\n  const handleMute = () => {\n    dispatch({\n      type: 'SET_VOLUME',\n      volume: 0\n    });\n  };\n\n  const unMute = () => {\n    const volumeLevelBeforeMute = parseInt(\n      JSON.parse(sessionStorage.getItem('unMuteVariable'))\n    );\n    dispatch({\n      type: 'SET_VOLUME',\n      volume: volumeLevelBeforeMute\n    });\n  };\n\n  /** song time increments when isPlaying is true\n   * timer stops when playerTime exceeds max song duration\n   */\n  useEffect(() => {\n    let timerId;\n    if (isPlaying) {\n      timerId = setInterval(() => {\n        if (playerTime < trackData?.duration_ms) {\n          dispatch({\n            type: 'SET_PLAYER_TIMELINE',\n            playerTime: playerTime + 1000\n          });\n        } else {\n          togglePause();\n          clearInterval(timerId);\n        }\n      }, 1000);\n    }\n    return () => clearInterval(timerId);\n  }, [isPlaying, playerTime, dispatch, togglePause, trackData?.duration_ms]);\n\n  return (\n    <div className=\"Footer\">\n      <div className=\"Footer-left\">\n        {trackData ? (\n          <img className=\"Footer-albumLogo\" src={trackData.image} alt=\"\" />\n        ) : null}\n        <div className=\"Footer-songInfo\">\n          <h4>{trackData?.name}</h4>\n          <p>\n            <span>\n              {trackData?.explicit && <ExplicitIcon fontSize=\"small\" />}{' '}\n            </span>\n            {trackData?.artist_name}\n          </p>\n        </div>\n      </div>\n\n      <div className=\"Footer-center\">\n        <div className=\"Footer-center-controls\">\n          <ShuffleIcon\n            className={isShuffling ? 'Footer-green' : ''}\n            onClick={toggleShuffle}\n          />\n          <SkipPreviousIcon fontSize=\"large\" className=\"Footer-icon\" />\n          {isPlaying ? (\n            <PauseCircleFilledIcon\n              className=\"Footer-icon\"\n              onClick={togglePause}\n            />\n          ) : (\n            <PlayCircleFilledIcon\n              className=\"Footer-icon\"\n              onClick={togglePause}\n            />\n          )}\n          <SkipNextIcon fontSize=\"large\" className=\"Footer-icon\" />\n          <RepeatIcon\n            className={isRepeated ? 'Footer-green' : ''}\n            onClick={toggleRepeat}\n          />\n        </div>\n        <div className=\"Footer-control-timeline\">\n          <div>\n            <span>{trackData && getSongDuration(playerTime)}</span>\n          </div>\n          <div className=\"Footer-control-slider\">\n            <Slider\n              value={playerTime}\n              minValue={0}\n              maxValue={trackData?.duration_ms}\n              handleChange={handleTimeline}\n            />\n          </div>\n          <div>\n            <span>{trackData && getSongDuration(trackData?.duration_ms)}</span>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"Footer-right\">\n        {/* Material UI grid */}\n        <Grid container spacing={2}>\n          <Grid item>\n            <PlaylistPlayIcon />\n          </Grid>\n          <Grid item>\n            {volume === 0 ? (\n              <VolumeOffIcon onClick={unMute} />\n            ) : (\n              <VolumeDownIcon onClick={handleMute} />\n            )}\n          </Grid>\n          <Grid item xs className=\"progressBar\">\n            <Slider\n              value={volume}\n              minValue={0}\n              maxValue={100}\n              handleChange={handleVolume}\n            />\n          </Grid>\n        </Grid>\n      </div>\n    </div>\n  );\n};\n\nexport default Footer;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport './PlaylistCardS.css';\n\n/** Renders preview of playlists\n *\n * App -> Routes -> Home -> Playlists\n */\n\nconst PlaylistCardS = ({ data }) => {\n  return (\n    <div className=\"PlaylistCardSBox\">\n      <Link to={`/playlists/${data?.handle}`} data-testid=\"playlist-link\">\n        <div className=\"PlaylistCardS\">\n          <div className=\"PlaylistCardS-ImgBox\">\n            <img src={data?.image} alt={`${data?.name} playlist cover`} />\n          </div>\n          <div className=\"PlaylistCardS-Title\">\n            <h3>{data?.name}</h3>\n          </div>\n        </div>\n      </Link>\n    </div>\n  );\n};\n\nexport default PlaylistCardS;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport './PlaylistCardM.css';\n\n/** Renders preview of playlists\n *\n * App -> Routes -> Home/Library -> Playlists\n */\n\nconst PlaylistCardM = ({ data }) => {\n  return (\n    <div className=\"PlaylistCardMBox\">\n      <Link to={`/playlists/${data?.handle}`} data-testid=\"playlist-link\">\n        <div className=\"PlaylistCardM\">\n          <div className=\"PlaylistCardM-ImgBox\">\n            <img src={data?.image} alt={`${data?.name} playlist cover`} />\n          </div>\n          <div className=\"PlaylistCardM-Title\">\n            <h3>{data?.name}</h3>\n            <p>{data?.description}</p>\n          </div>\n        </div>\n      </Link>\n    </div>\n  );\n};\n\nexport default PlaylistCardM;\n","import React from 'react';\nimport { useStateValue } from '../StateProvider';\nimport Header from '../components/header/Header';\nimport Sidebar from '../components/sidebar/Sidebar';\nimport Footer from '../components/footer/Footer';\nimport PlaylistCardS from '../components/cards/PlaylistCardS';\nimport PlaylistCardM from '../components/cards/PlaylistCardM';\nimport './Home.css';\n\n/** View short list of playlists stored in db.\n *\n * - useStateValue: access globally stored state\n *\n * App -> Routes -> Home -> Playlist\n */\n\nconst Home = () => {\n  const [{ playlists }] = useStateValue();\n  // console.debug('Home', 'playlists=', playlists);\n\n  return (\n    <>\n      <div className=\"Home\">\n        <Sidebar />\n        <div className=\"Home-body\">\n          <Header />\n          <div className=\"Home-content\">\n            <section>\n              <div className=\"Section-title\">\n                <h2>Good afternoon</h2>\n              </div>\n\n              <div className=\"Section-cards\">\n                {playlists.slice(0, 4).map(item => {\n                  return <PlaylistCardS key={item.name} data={item} />;\n                })}\n              </div>\n            </section>\n\n            <section>\n              <div className=\"Section-title\">\n                <h2>Soundtrack your day</h2>\n              </div>\n\n              <div className=\"Section-cards\">\n                {playlists.slice(0, 10).map(item => {\n                  return <PlaylistCardM key={item.name} data={item} />;\n                })}\n              </div>\n            </section>\n          </div>\n        </div>\n      </div>\n      <Footer />\n    </>\n  );\n};\n\nexport default Home;\n","export const SEARCHCARDS = [\n  {\n    bgcolor: 'rgb(75, 145, 125)',\n    imgurl: 'https://t.scdn.co/images/4b7472015a274eadbc00119f5141e548.jpeg',\n    title: 'Top Lists'\n  },\n  {\n    bgcolor: 'rgb(245, 155, 35)',\n    imgurl: 'https://t.scdn.co/images/9676cef74ec147a48607c737c4f93943.jpeg',\n    title: 'Hip-Hop'\n  },\n  {\n    bgcolor: 'rgb(235, 30, 50)',\n    imgurl: 'https://t.scdn.co/images/31c85ae6fec34a16927ef28a7a88e97b.jpeg',\n    title: 'Rock'\n  },\n  {\n    bgcolor: 'rgb(160, 195, 210)',\n    imgurl: 'https://t.scdn.co/images/68433b0ee5b5465b8e926c42b84cbcdb.jpeg',\n    title: 'Daily Mixes'\n  },\n  {\n    bgcolor: 'rgb(76, 126, 148)',\n    imgurl: 'https://t.scdn.co/images/0f2f4c71c9714cc5b757f7bb3559fcdb.jpeg',\n    title: 'Jazz'\n  },\n  {\n    bgcolor: 'rgb(99, 127, 31)',\n    imgurl: 'https://t.scdn.co/images/fe06caf056474bc58862591cd60b57fc.jpeg',\n    title: 'Indie'\n  },\n  {\n    bgcolor: 'rgb(160, 195, 210)',\n    imgurl: 'https://t.scdn.co/images/acc7b5d7b1264d0593ec05c020d0a689.jpeg',\n    title: 'New Music Fridays'\n  },\n  {\n    bgcolor: 'rgb(252, 198, 111)',\n    imgurl: 'https://t.scdn.co/media/links/workout-274x274.jpg',\n    title: 'Workout'\n  },\n  {\n    bgcolor: 'rgb(245, 155, 35)',\n    imgurl: 'https://t.scdn.co/images/ad4d5c268a214f78920517e76e6ed107.jpeg',\n    title: 'Podcasts'\n  },\n  {\n    bgcolor: 'rgb(32, 53, 98)',\n    imgurl:\n      'https://t.scdn.co/media/derived/edm-274x274_0ef612604200a9c14995432994455a6d_0_0_274_274.jpg',\n    title: 'Dance / Electronic'\n  },\n  {\n    bgcolor: 'rgb(180, 155, 200)',\n    imgurl: 'https://t.scdn.co/images/d0fb2ab104dc4846bdc56d72b0b0d785.jpeg',\n    title: 'Discover'\n  },\n  {\n    bgcolor: 'rgb(111, 111, 111)',\n    imgurl: 'https://t.scdn.co/images/ffbc60a80ba64554ac09130827c43d06.jpeg',\n    title: 'Metal'\n  },\n  {\n    bgcolor: 'rgb(195, 240, 200)',\n    imgurl: 'https://t.scdn.co/images/d355f48a90b64c25b6e004179a596e51.jpeg',\n    title: 'Pop'\n  },\n  {\n    bgcolor: 'rgb(255, 100, 55)',\n    imgurl: 'https://t.scdn.co/images/60075fbc12304968941c7445a971fb9d.jpeg',\n    title: 'Concerts'\n  },\n  {\n    bgcolor: 'rgb(80, 155, 245)',\n    imgurl: 'https://t.scdn.co/images/baf681efc57145e180589e027496b101.jpeg',\n    title: 'Happy'\n  },\n  {\n    bgcolor: 'rgb(245, 155, 35)',\n    imgurl: 'https://t.scdn.co/images/194b9d722de34cefb3b716c653b4526b.png',\n    title: 'Work'\n  },\n  {\n    bgcolor: 'rgb(160, 195, 210)',\n    imgurl: 'https://t.scdn.co/images/2470fe22d03a4375a9501dce8cfb2b8c.jpeg',\n    title: 'Chill'\n  },\n  {\n    bgcolor: 'rgb(180, 155, 200)',\n    imgurl: 'https://t.scdn.co/images/cf23ab0343e047daa88703e21c01a4aa.jpeg',\n    title: 'Classical'\n  }\n];\n","import React from 'react';\nimport './SearchPageCard.css';\n\n/** Filler category cards for Search.js\n *\n * App -> Routes -> Search -> SearchPageCard\n */\n\nconst SearchPageCard = ({ cardData }) => {\n  // console.debug('SearchPageCard','cardData=', cardData);\n\n  return (\n    <div\n      key={cardData.title}\n      className=\"SearchCardBox\"\n      style={{ backgroundColor: `${cardData.bgcolor}` }}\n      data-testid=\"card-box\"\n    >\n      <div className=\"SearchCard\">\n        <img src={cardData.imgurl} alt={`${cardData.title} cover`} />\n        <h2>{cardData.title}</h2>\n      </div>\n    </div>\n  );\n};\n\nexport default SearchPageCard;\n","import React, { useContext, useState, useEffect, useRef } from 'react';\nimport { useStateValue } from '../../StateProvider';\nimport SpotifyWebApi from 'spotify-web-api-js';\nimport SpotifyCloneApi from '../../common/api';\nimport UserContext from '../../UserContext';\nimport './SongCard.css';\n\nimport ExplicitIcon from '@material-ui/icons/Explicit';\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport MoreHorizIcon from '@material-ui/icons/MoreHoriz';\n\n/** Song results for SearchBar\n *\n * App -> Routes -> Header -> Searchbar\n *                  Search -> SongCard\n */\n\nconst SongCard = ({ trackData = 'test', handleAlert }) => {\n  const spotify = new SpotifyWebApi();\n  const [{ playlists }, dispatch] = useStateValue();\n  const { getSongDuration } = useContext(UserContext);\n  const [liked, setLike] = useState(false);\n  const [isDivActive, setIsDivActive] = useState(false);\n  const addToPlaylistRef = useRef(null);\n  const [artistImg, setArtistImg] = useState('');\n\n  const addSongToPlaylist = async playlistID => {\n    try {\n      let totalSongs = await SpotifyCloneApi.getSongCount();\n      /** Makes a POST request to common > api.js and adds song, album, artist data to postgres */\n      await SpotifyCloneApi.addArtist(artistData);\n      await SpotifyCloneApi.addAlbum(albumData);\n      await SpotifyCloneApi.addSong(songData);\n\n      /** Makes a POST request to common > api.js and adds song to selected playlist\n       * success notification\n       */\n      await SpotifyCloneApi.addSongToPlaylist(playlistID, totalSongs + 1); // (playlistID, songKey)\n      handleAlert();\n    } catch (err) {\n      console.error(err);\n      return;\n    }\n  };\n\n  /** set data for postgres insertion */\n  const songData = {\n    id: trackData.id,\n    name: trackData.name,\n    duration_ms: trackData.duration_ms,\n    explicit: trackData.explicit,\n    artist_id: trackData.artists[0].id,\n    album_id: trackData.album.id,\n    image: trackData.album.images[1].url\n  };\n  const albumData = {\n    id: trackData.album.id,\n    name: trackData.album.name,\n    artist_id: trackData.artists[0].id,\n    release_date: trackData.album.release_date,\n    image: trackData.album.images[1].url\n  };\n  const artistData = {\n    id: trackData.artists[0].id,\n    name: trackData.artists[0].name,\n    image: artistImg\n  };\n\n  /** \"PLAYS\" SONG IN FOOTER\n   * set song variable for dispatch\n   */\n  const playSongData = {\n    id: trackData.id,\n    name: trackData.name,\n    duration_ms: trackData.duration_ms,\n    explicit: trackData.explicit,\n    artist_name: trackData.artists[0].name,\n    image: trackData.album.images[1].url\n  };\n  const playSong = track => {\n    dispatch({\n      type: 'SET_SONG',\n      trackData: track\n    });\n    dispatch({\n      type: 'SET_PLAYING',\n      isPlaying: false\n    });\n    dispatch({\n      type: 'SET_PLAYER_TIMELINE',\n      playerTime: 0\n    });\n  };\n\n  const toggleLike = () => {\n    setLike(liked ? false : true);\n  };\n\n  const handleMoreClick = async () => {\n    setIsDivActive(true);\n\n    // gets artist img (which needs a separate api call)\n    let artist = await spotify.getArtist(trackData.artists[0].id);\n    setArtistImg(artist.images[1].url);\n  };\n\n  useEffect(() => {\n    function handleClickOutside(evt) {\n      // check if the clicked element is not inside the div element\n      if (\n        addToPlaylistRef.current &&\n        !addToPlaylistRef.current.contains(evt.target)\n      ) {\n        // set the isDivActive state to false if the click is outside the menu\n        setIsDivActive(false);\n      }\n    }\n    // add a mousedown event listener to the document object\n    document.addEventListener('mousedown', handleClickOutside);\n\n    // remove the event listener when the component unmounts\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, [addToPlaylistRef]);\n\n  return (\n    <>\n      <div className=\"SongCardBox\">\n        <div\n          className=\"SongCard\"\n          onClick={() => {\n            playSong(playSongData);\n          }}\n        >\n          <div className=\"SongCard-img\">\n            <img src={trackData.album.images[2].url} alt=\"\" />\n          </div>\n          <div className=\"SongCard-credits\">\n            <h3>{trackData.name}</h3>\n            <p>\n              {trackData.explicit && <ExplicitIcon />}\n              {trackData.artists.map(artist => artist.name).join(', ')}\n            </p>\n          </div>\n\n          <div className=\"SongCard-icons\">\n            <div className=\"SongCard-like\">\n              {liked ? (\n                <FavoriteIcon\n                  onClick={toggleLike}\n                  className=\"Playlist-heart-filled\"\n                />\n              ) : (\n                <FavoriteBorderIcon\n                  onClick={toggleLike}\n                  className=\"Playlist-heart-outline\"\n                />\n              )}\n            </div>\n            <div className=\"SongCard-song-duration\">\n              {getSongDuration(trackData.duration_ms)}\n            </div>\n            <div className=\"SongCard-more\">\n              <div onClick={() => handleMoreClick()}>\n                <MoreHorizIcon />\n                {/* Add to playlist menu */}\n                {isDivActive && (\n                  <div className=\"Playlist-add\" ref={addToPlaylistRef}>\n                    Add to playlist:\n                    {playlists.map(playlist => {\n                      return (\n                        <button\n                          key={playlist.handle}\n                          title=\"Add to this playlist\"\n                          onClick={() => {\n                            addSongToPlaylist(playlist.id);\n                          }}\n                        >\n                          <span>{playlist.name}</span>\n                        </button>\n                      );\n                    })}\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default SongCard;\n","import React, { useState } from 'react';\nimport { useStateValue } from '../StateProvider';\nimport { SEARCHCARDS } from '../data/searchcards';\nimport Header from '../components/header/Header';\nimport Sidebar from '../components/sidebar/Sidebar';\nimport Footer from '../components/footer/Footer';\nimport SearchPageCard from '../components/cards/SearchPageCard';\nimport SongCard from '../components/cards/SongCard';\nimport './Search.css';\n\nimport { Stack, Snackbar } from '@mui/material';\nimport MuiAlert from '@mui/material/Alert';\n\n/** MUI Alert pop-up */\nconst Alert = React.forwardRef(function Alert(props, ref) {\n  return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\n});\n\n/** View Playlist with songs related to playlist.\n *\n * - useStateValue: access globally stored state\n *\n * App -> Routes -> Search -> SearchPageCard\n *                         -> SongCard\n */\n\nconst Search = () => {\n  const [{ token, searchTerm, searchResults }] = useStateValue();\n  const [open, setOpen] = useState(false);\n\n  // console.debug('PlaylistCardS', 'token=', token, 'searchTerm=', searchTerm,'searchResults=', searchResults);\n\n  /** MUI Alert pop-up */\n  const handleAlert = () => {\n    setOpen(true);\n  };\n  const handleClose = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n    setOpen(false);\n  };\n\n  return (\n    <>\n      <div className=\"Search\">\n        <Sidebar />\n        <div className=\"Search-body\">\n          <Header />\n          <div className=\"Search-content\">\n            <h2>Browse all</h2>\n            <div\n              className={\n                searchTerm && token ? 'ResultsCardGrid' : 'SearchCardGrid'\n              }\n            >\n              {searchTerm && token\n                ? searchResults?.tracks?.items.map((songs, i) => {\n                    return (\n                      <SongCard\n                        key={i}\n                        trackData={songs}\n                        handleAlert={handleAlert}\n                      />\n                    );\n                  })\n                : SEARCHCARDS.map(card => {\n                    return (\n                      <SearchPageCard\n                        key={card.title}\n                        cardData={{\n                          bgcolor: card.bgcolor,\n                          title: card.title,\n                          imgurl: card.imgurl\n                        }}\n                      />\n                    );\n                  })}\n              {searchResults?.tracks?.total === 0\n                ? `There are no results for \"${searchTerm}\"`\n                : null}\n            </div>\n            {/* Material UI alert */}\n            <Stack spacing={2} sx={{ width: '100%' }}>\n              <Snackbar\n                open={open}\n                autoHideDuration={4000}\n                onClose={handleClose}\n                anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\n              >\n                <Alert\n                  onClose={handleClose}\n                  severity=\"success\"\n                  sx={{ width: '100%', bottom: '10em' }}\n                >\n                  Song was successfully added!\n                </Alert>\n              </Snackbar>\n            </Stack>\n          </div>\n        </div>\n      </div>\n\n      <Footer />\n    </>\n  );\n};\n\nexport default Search;\n","import React from 'react';\nimport './InfoCard.css';\n\n/** Renders artists and albums\n *\n * difference from PlaylistCardM is lack of a Link\n *\n * App -> Routes -> Library -> Artists/Albums\n */\n\nconst InfoCard = ({ data, borderRadius }) => {\n  return (\n    <div className=\"InfoCardMBox\">\n      <div className=\"InfoCardM\">\n        <div className={borderRadius}>\n          <img src={data?.image} alt={data?.name || ''} />\n        </div>\n        <div className=\"InfoCardM-Title\">\n          <h3>{data?.name}</h3>\n          <p>{data?.description ? data?.description : 'Artist'}</p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default InfoCard;\n","import React from 'react';\nimport { Route } from 'react-router-dom';\nimport { useStateValue } from '../StateProvider';\nimport Header from '../components/header/Header';\nimport Sidebar from '../components/sidebar/Sidebar';\nimport Footer from '../components/footer/Footer';\nimport PlaylistCardM from '../components/cards/PlaylistCardM';\nimport InfoCard from '../components/cards/InfoCard';\nimport './Library.css';\n\n/** View list of playlists, artist, albums stored in db\n *\n * - useStateValue: access globally stored state\n *\n * App -> Routes -> Library -> Playlist\n */\n\nconst Library = () => {\n  return (\n    <>\n      <div className=\"Library\">\n        <Sidebar />\n        <div className=\"Library-body\">\n          <Header />\n          <div className=\"Library-content\">\n            <Route exact path=\"/library\">\n              <PlaylistTab />\n            </Route>\n            <Route path=\"/library/podcasts\">\n              <PodcastTab />\n            </Route>\n            <Route path=\"/library/artists\">\n              <ArtistTab />\n            </Route>\n            <Route path=\"/library/albums\">\n              <AlbumTab />\n            </Route>\n          </div>\n        </div>\n      </div>\n      <Footer />\n    </>\n  );\n};\n\nconst PlaylistTab = () => {\n  const [{ playlists }] = useStateValue();\n  // console.debug('Library', 'playlists=', playlists);\n\n  return (\n    <div>\n      <h2>Playlists</h2>\n      <div className=\"Grid\">\n        {playlists.map(item => {\n          return <PlaylistCardM key={item.name} data={item} />;\n        })}\n      </div>\n    </div>\n  );\n};\n\nconst PodcastTab = () => {\n  return (\n    <div>\n      <h2>Podcasts</h2>\n      <div className=\"Grid\">\n        <p>You have no favorited podcasts.</p>\n      </div>\n    </div>\n  );\n};\n\nconst ArtistTab = () => {\n  const [{ artists }] = useStateValue();\n  // console.debug('Library', 'artists=', artists);\n\n  return (\n    <div>\n      <h2>Artists</h2>\n      <div className=\"Grid\">\n        {artists.map(item => {\n          return (\n            <InfoCard\n              key={item.name}\n              data={item}\n              borderRadius={'InfoCardM-ImgBox-Artist'}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nconst AlbumTab = () => {\n  const [{ albums }] = useStateValue();\n  // console.debug('Library', 'albums=', albums);\n\n  return (\n    <div>\n      <h2>Albums</h2>\n      <div className=\"Grid\">\n        {albums.map(item => {\n          return (\n            <InfoCard\n              key={item.name}\n              data={item}\n              borderRadius={'InfoCardM-ImgBox-Album'}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default Library;\n","import React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useStateValue } from '../../StateProvider';\nimport SpotifyCloneApi from '../../common/api';\nimport './EditPlaylistForm.css';\n\n/** View Playlist and edit details with default values.\n *\n * - useHistory: lets you access the history instance used by React Router, useful for redirecting users to another page\n * - useStateValue: access globally stored state\n *\n * App -> Routes -> Home/Library/Sidebar -> Playlist -> EditPlaylistForm\n */\n\nconst EditPlaylistForm = ({ playlist, closeModal }) => {\n  const history = useHistory();\n  const [{}, dispatch] = useStateValue();\n\n  const INITIAL_STATE = {\n    name: playlist.name,\n    description: playlist.description,\n    image: ''\n  };\n  const [formData, setFormData] = useState(INITIAL_STATE);\n  const playlistData = {\n    name: formData.name,\n    handle: formData.name.toLowerCase().split(' ').join('-').replace('#', ''),\n    description: formData.description,\n    image: formData.image ? formData.image : playlist.image\n  };\n\n  //   console.debug('EditPlaylistForm',  'playlist=',  playlist, 'formData=', formData );\n\n  /** Update form fields */\n  const handleChange = evt => {\n    const { name, value } = evt.target;\n    setFormData(data => ({\n      ...data,\n      [name]: value\n    }));\n  };\n\n  /** on form submit:\n   * - attempt save to backend & report any errors\n   * - if successful\n   *   - close modal and show new changes\n   */\n  const handleSubmit = async evt => {\n    evt.preventDefault();\n\n    // update the values of the playlistData object as needed, rather than defining it each time the form is submitted\n    playlistData.name = formData.name;\n    playlistData.handle = formData.name\n      .toLowerCase()\n      .split(' ')\n      .join('-')\n      .replace('#', '');\n    playlistData.description = formData.description;\n    playlistData.image = formData.image ? formData.image : playlist.image;\n\n    // sets default playlist name if name input is left empty\n    try {\n      // makes a POST request to Api.js and adds corresponding data to matching category in db.json\n      const result = await SpotifyCloneApi.savePlaylist(\n        playlist.handle,\n        playlistData\n      );\n      // for refreshing playlist name in sidebar\n      const playlists = await SpotifyCloneApi.getPlaylists();\n      dispatch({\n        type: 'SET_PLAYLISTS',\n        playlists: playlists\n      });\n      // Redirect to newly-made playlist\n      history.push(`/playlists/${result.handle}`);\n      closeModal();\n    } catch (err) {\n      console.error(err);\n      return;\n    }\n  };\n\n  return (\n    <>\n      <div className=\"EditPlaylistForm-background\" onClick={closeModal}></div>\n      <div className=\"EditPlaylistForm-child\">\n        <form onSubmit={handleSubmit} className=\"EditPlaylistForm-child\">\n          <div className=\"create-playlist-title\">Edit {playlist.name}</div>\n          <div className=\"create-playlist-grey\">\n            <div className=\"playlist-inputs\">\n              <div className=\"playlist-inputs-name\">\n                <div className=\"input-name\">Playlist name</div>\n                <input\n                  name=\"name\"\n                  className=\"playlist-input-name\"\n                  placeholder=\"Give it a name (or not)\"\n                  onChange={handleChange}\n                  value={formData.name}\n                  maxLength=\"100\"\n                  autoComplete=\"off\"\n                  autoFocus=\"autofocus\"\n                  required\n                />\n              </div>\n              <div className=\"playlist-inputs-description\">\n                <div className=\"input-name\">Description</div>\n                <textarea\n                  name=\"description\"\n                  className=\"playlist-input-description\"\n                  placeholder=\"Say something about your new playlist\"\n                  onChange={handleChange}\n                  value={formData.description}\n                  maxLength=\"200\"\n                  autoComplete=\"off\"\n                />\n              </div>\n              <div className=\"playlist-inputs-image\">\n                <div className=\"input-name\">Playlist image</div>\n                <input\n                  name=\"image\"\n                  type=\"url\"\n                  className=\"playlist-input-image\"\n                  placeholder=\"Insert an image uri\"\n                  onChange={handleChange}\n                  value={formData.image}\n                  autoComplete=\"off\"\n                />\n              </div>\n            </div>\n          </div>\n          <div className=\"EditPlaylistForm-buttons\">\n            <div className=\"EditPlaylistForm-cancel\" onClick={closeModal}>\n              CANCEL\n            </div>\n            <button type=\"submit\" className=\"EditPlaylistForm-create\">\n              SAVE\n            </button>\n          </div>\n        </form>\n      </div>\n    </>\n  );\n};\n\nexport default EditPlaylistForm;\n","import React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useStateValue } from '../../StateProvider';\nimport SpotifyCloneApi from '../../common/api';\nimport EditPlaylistForm from './EditPlaylistForm';\nimport './PlaylistControls.css';\n\nimport PlayCircleFilledIcon from '@material-ui/icons/PlayCircleFilled';\nimport PauseCircleFilledIcon from '@material-ui/icons/PauseCircleFilled';\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport MoreHorizIcon from '@material-ui/icons/MoreHoriz';\nimport SearchIcon from '@material-ui/icons/Search';\n\n/** Component for playlist play/pause, like, edit buttons\n *\n * - useState: state variables in functional components\n * - useHistory: lets you access the history instance used by React Router, useful for redirecting users to another page\n * - useStateValue: access globally stored state\n *\n * App -> Routes -> Home/Library/Sidebar -> Playlist -> PlaylistControls\n */\n\nconst PlaylistControls = ({ playlist, handleSort, sortOption }) => {\n  const history = useHistory();\n  const [{ isPlaying }, dispatch] = useStateValue();\n  const [liked, setLike] = useState(false);\n  const [modalOpen, setModalOpen] = useState(false);\n  const [isClicked, seIsClicked] = useState(false);\n\n  // console.debug('PlaylistControls', 'playlist=', playlist, 'handle=', handle ,'sort=',sort,'isPlaying=',isPlaying,'liked=',liked,'modalOpen=',modalOpen,'isClicked=',isClicked);\n\n  const togglePause = () => {\n    dispatch({\n      type: 'SET_PLAYING',\n      isPlaying: !isPlaying\n    });\n  };\n\n  const toggleLike = () => setLike(liked ? false : true);\n  const openModal = () => setModalOpen(true);\n  const closeModal = () => setModalOpen(false);\n  const handleClick = () => seIsClicked(isClicked ? false : true);\n\n  const deletePlaylist = async () => {\n    const confirm = window.confirm(\n      'Are you sure you want to delete this playlist?'\n    );\n    if (confirm) {\n      try {\n        /** Makes a POST request to Api.js and deletes playlist from db */\n        await SpotifyCloneApi.deletePlaylist(playlist.id);\n      } catch (err) {\n        console.error(err);\n        return;\n      } finally {\n        // runs regardless of error\n        // for refreshing playlist name in sidebar\n        const playlists = await SpotifyCloneApi.getPlaylists();\n        dispatch({\n          type: 'SET_PLAYLISTS',\n          playlists: playlists\n        });\n\n        history.goBack(); // redirect to previous page\n        console.log('Playlist successfully deleted.');\n      }\n    } else {\n      // Do nothing\n      console.log('Delete cancelled.');\n    }\n  };\n\n  return (\n    <div className=\"Playlist-controls\">\n      <div className=\"Playlist-icons\">\n        {isPlaying ? (\n          <PauseCircleFilledIcon\n            className=\"Playlist-shuffle\"\n            onClick={togglePause}\n          />\n        ) : (\n          <PlayCircleFilledIcon\n            className=\"Playlist-shuffle\"\n            onClick={togglePause}\n          />\n        )}\n        {liked ? (\n          <FavoriteIcon\n            fontSize=\"large\"\n            onClick={toggleLike}\n            className=\"Playlist-heart-filled\"\n          />\n        ) : (\n          <FavoriteBorderIcon\n            fontSize=\"large\"\n            onClick={toggleLike}\n            className=\"Playlist-heart-outline\"\n          />\n        )}\n\n        <div className=\"Playlist-edit-toggle\">\n          <div onClick={handleClick}>\n            <MoreHorizIcon fontSize=\"large\" />\n            {isClicked && (\n              <div className=\"Playlist-edit-buttons\">\n                <button title=\"Edit playlist\" onClick={openModal}>\n                  Edit\n                </button>\n                <button title=\"Delete playlist\" onClick={deletePlaylist}>\n                  Delete\n                </button>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n\n      <div className=\"Playlist-sorting\">\n        <SearchIcon />\n        <form sx={{ m: 1, minWidth: 80 }} className=\"Playlist-form\">\n          <select\n            id=\"song-order\"\n            value={sortOption}\n            label=\"Age\"\n            onChange={handleSort}\n          >\n            <option value=\"\" className=\"sort-by\" disabled>\n              Sort by\n            </option>\n            <option value=\"default\">Custom order</option>\n            <option value=\"name\">Title</option>\n            <option value=\"artist\">Artist</option>\n            <option value=\"album\">Album</option>\n            <option value=\"added_at\">Date added</option>\n            <option value=\"duration\">Duration</option>\n          </select>\n        </form>\n      </div>\n      {modalOpen && (\n        <EditPlaylistForm playlist={playlist} closeModal={closeModal} />\n      )}\n    </div>\n  );\n};\n\nexport default PlaylistControls;\n","import React, { useContext, useState } from 'react';\nimport UserContext from '../../UserContext';\nimport { useStateValue } from '../../StateProvider';\nimport './Song.css';\n\nimport ExplicitIcon from '@material-ui/icons/Explicit';\n\n/** Reusable component for Playlist.js\n * shows song details\n *\n * - useContext: common data that can be accessed throughout the component hierarchy without passing the props down manually to each level\n * - getSongDuration: Handles milliseconds to minutes:seconds conversion\n * - daysAgo: Calculates days since song was added to playlist\n *\n * App -> Routes -> Playlist -> SongList -> Song\n */\n\nconst Song = ({ track = 'test', id, removeSong }) => {\n  const [{ trackData }] = useStateValue();\n  const [isHovering, setIsHovering] = useState(false);\n  const { getSongDuration, daysAgo } = useContext(UserContext);\n  const numOfDays = daysAgo(track.added_at, new Date());\n\n  /**\n   * Returns the appropriate label for the number of days since the track was added to the playlist\n   * shows actual date if track.added_at is over 1 month\n   */\n  const days = numOfDays => {\n    if (numOfDays > 30) {\n      return formatDate(track.added_at);\n    } else if (numOfDays > 14) {\n      numOfDays = Math.floor(numOfDays / 7);\n      return `${numOfDays} weeks ago`;\n    } else if (numOfDays > 7) {\n      numOfDays = Math.floor(numOfDays / 7);\n      return `${numOfDays} week ago`;\n    } else if (numOfDays > 1) {\n      return `${numOfDays} days ago`;\n    } else if (numOfDays === 1) {\n      return `${numOfDays} day ago`;\n    }\n  };\n  const formatDate = dateString => {\n    const date = new Date(dateString);\n    const monthNames = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]; //prettier-ignore\n    const month = monthNames[date.getMonth()];\n    const day = date.getDate();\n    const year = date.getFullYear();\n    return `${month} ${day}, ${year}`;\n  };\n\n  /**\n   * Toggles the hovering state of the component.\n   */\n  const handleMouseOver = () => {\n    let mouse = isHovering === false ? true : false;\n    setIsHovering(mouse);\n  };\n\n  return (\n    <>\n      <td>{id + 1}</td>\n      <td>\n        <div className=\"Song-info\">\n          <div className=\"Song-img\">\n            <img className=\"Song-albumImg\" src={track.image} alt=\"\" />\n          </div>\n          <div className=\"Song-credits\">\n            <h3>\n              <span\n                className={track.id === trackData?.id ? 'Song-current' : ''}\n              >\n                {track.name}\n              </span>\n            </h3>\n            <p>\n              <span>\n                {track.explicit && <ExplicitIcon fontSize=\"small\" />}{' '}\n              </span>\n              <span>{track.artist_name}</span>\n              {/* <span>{track.artists.map(artist => artist.name).join(', ')}</span> */}\n            </p>\n          </div>\n        </div>\n      </td>\n      <td>{track.album_name}</td>\n      <td>{numOfDays > 0 ? days(numOfDays) : 'Today'}</td>\n      <td>{getSongDuration(track.duration_ms)}</td>\n      <td>\n        <div\n          className=\"Song-delete\"\n          onMouseEnter={handleMouseOver}\n          onMouseLeave={handleMouseOver}\n        >\n          {isHovering ? (\n            <button\n              className=\"Song-button-delete\"\n              onClick={() => {\n                removeSong(track.key);\n              }}\n            >\n              X\n            </button>\n          ) : (\n            <button\n              className=\"Song-button-static\"\n              title=\"remove from this playlist\"\n            >\n              ...\n            </button>\n          )}\n        </div>\n      </td>\n    </>\n  );\n};\n\nexport default Song;\n","import React from 'react';\nimport { useStateValue } from '../../StateProvider';\nimport Song from './Song';\nimport './SongList.css';\n\nimport AccessTimeIcon from '@material-ui/icons/AccessTime';\n\n/** View Playlist with songs related to playlist.\n *\n * - useStateValue: access globally stored state\n *\n * App -> Routes -> Playlist -> SongList -> Song\n */\n\nconst SongList = ({ songs, sortOption, removeSong }) => {\n  const [{ trackData }, dispatch] = useStateValue();\n\n  /** re-orders songs based on sortOption */\n  const sortedData = () => {\n    switch (sortOption) {\n      case 'name':\n        return songs.sort((a, b) => a.name.localeCompare(b.name));\n      case 'artist':\n        return songs.sort((a, b) => a.artist_name.localeCompare(b.artist_name));\n      case 'album':\n        return songs.sort((a, b) => a.album_name.localeCompare(b.album_name));\n      case 'added_at':\n        return songs.sort((a, b) => a.added_at.localeCompare(b.added_at));\n      case 'duration':\n        return songs.sort((a, b) => a.duration_ms - b.duration_ms);\n      default:\n        return songs;\n    }\n  };\n\n  /** \"PLAYS\" SONG IN FOOTER\n   * Sets the current song and updates the playing state and player timeline\n   */\n  const setSong = track => {\n    dispatch({\n      type: 'SET_SONG',\n      trackData: track\n    });\n    dispatch({\n      type: 'SET_PLAYING',\n      isPlaying: true\n    });\n    dispatch({\n      type: 'SET_PLAYER_TIMELINE',\n      playerTime: 0\n    });\n  };\n\n  return (\n    <div className=\"Playlist-songList\">\n      <table>\n        <thead>\n          <tr>\n            <th>#</th>\n            <th>TITLE</th>\n            <th>ALBUM</th>\n            <th>DATE ADDED</th>\n            <th>\n              <AccessTimeIcon />\n            </th>\n          </tr>\n        </thead>\n        <tbody>\n          {sortedData().map((track, id) => (\n            <tr\n              key={track.id}\n              className={track.id === trackData?.id ? 'SongList-current' : ''}\n              onClick={() => {\n                setSong(track);\n              }}\n            >\n              <Song track={track} id={id} removeSong={removeSong} />\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default SongList;\n","import React, { useState, useEffect } from 'react';\nimport { useParams, useHistory } from 'react-router-dom';\nimport SpotifyCloneApi from '../common/api';\nimport Header from '../components/header/Header';\nimport Sidebar from '../components/sidebar/Sidebar';\nimport Footer from '../components/footer/Footer';\nimport PlaylistControls from '../components/playlist/PlaylistControls';\nimport SongList from '../components/playlist/SongList';\nimport './Playlist.css';\n\n/** View Playlist with songs related to playlist.\n *\n * - useParams: returns an object of key/value pairs of the dynamic params from the current URL that were matched by the <Route path>\n * - useState: state variables in functional components\n * - useHistory: lets you access the history instance used by React Router, useful for redirecting users to another page\n * - useStateValue: access globally stored state\n * - useContext: common data that can be accessed throughout the component hierarchy without passing the props down manually to each level\n *\n * App -> Routes -> Home/Library/Sidebar -> Playlist\n */\n\nconst Playlist = () => {\n  const { handle } = useParams();\n  const history = useHistory();\n  const [playlist, setPlaylist] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [sortOption, setSortOption] = useState('default');\n\n  /** handles select form for sorting to be passed as prop */\n  const handleSort = evt => setSortOption(evt.target.value);\n\n  const removeSongFromPlaylist = async songKey => {\n    try {\n      await SpotifyCloneApi.removeSongFromPlaylist(playlist.id, songKey);\n      history.go(0);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // GET PLAYLIST FROM DB\n  useEffect(() => {\n    const getPlaylistDetails = async () => {\n      try {\n        const result = await SpotifyCloneApi.getPlaylist(handle);\n        setPlaylist(result);\n      } catch (error) {\n        console.error(error);\n        history.push('/404');\n      } finally {\n        setIsLoading(false);\n        document.body.style.cursor = 'default';\n      }\n    };\n    getPlaylistDetails();\n  }, [handle, history]);\n\n  if (isLoading) {\n    document.body.style.cursor = 'progress';\n    return '';\n  }\n\n  return (\n    <>\n      <div className=\"Playlist\">\n        <Sidebar />\n        <div className=\"Playlist-body\">\n          <Header />\n          <div className=\"Playlist-info\">\n            <img src={playlist?.image} alt=\"\" />\n            <div className=\"Playlist-infoText\">\n              <strong>PLAYLIST</strong>\n              <h2>{playlist?.name}</h2>\n              <p>{playlist?.description}</p>\n              <a href={playlist ? playlist?.user?.profile_url : ''}>\n                <div className=\"Playlist-avatar\">\n                  <img\n                    src={playlist?.user?.image}\n                    alt={playlist ? playlist?.user?.display_name : ''}\n                  />\n                  <h4>{playlist?.user?.display_name}</h4>\n                </div>\n              </a>\n            </div>\n          </div>\n\n          <section>\n            <PlaylistControls playlist={playlist} handleSort={handleSort} />\n            <SongList\n              songs={playlist?.songs}\n              sortOption={sortOption}\n              removeSong={removeSongFromPlaylist}\n            />\n          </section>\n        </div>\n      </div>\n\n      <Footer />\n    </>\n  );\n};\n\nexport default Playlist;\n","import React, { useContext } from 'react';\nimport { useStateValue } from '../StateProvider';\nimport UserContext from '../UserContext';\nimport './Playlist.css';\n\nimport Header from '../components/header/Header';\nimport Sidebar from '../components/sidebar/Sidebar';\nimport Footer from '../components/footer/Footer';\nimport PlaylistControls from '../components/playlist/PlaylistControls';\n\nimport AccessTimeIcon from '@material-ui/icons/AccessTime';\n\n/** View Playlist with songs related to playlist.\n *\n * - useStateValue: access globally stored state\n * - useContext: common data that can be accessed throughout the component hierarchy without passing the props down manually to each level\n *\n * App -> Routes -> Home/Library/Sidebar -> Playlist\n */\n\nconst Playlist = () => {\n  const [{ discover_weekly }, dispatch] = useStateValue();\n  const { getSongDuration, daysAgo } = useContext(UserContext);\n\n  // console.debug('Playlist', 'discover_weekly=',discover_weekly,'getSongDuration=',getSongDuration);\n\n  // Save data to session storage in case of page refresh\n  sessionStorage.setItem(\n    'spotify_discover_weekly_data',\n    JSON.stringify(discover_weekly)\n  );\n\n  /** \"PLAYS\" SONG IN FOOTER\n   * Sets the current song and updates the playing state and player timeline\n   */\n  const setSong = track => {\n    dispatch({\n      type: 'SET_SONG',\n      trackData: track\n    });\n    dispatch({\n      type: 'SET_PLAYING',\n      isPlaying: false\n    });\n  };\n\n  const days = numOfDays => {\n    if (numOfDays > 1) {\n      return 'days ago';\n    } else if (numOfDays === 1) {\n      return 'day ago';\n    } else {\n      return 'Today';\n    }\n  };\n\n  return (\n    <>\n      <div className=\"Playlist\">\n        <Sidebar />\n        <div className=\"Playlist-body\">\n          <Header />\n          <div className=\"Playlist-info\">\n            <img src={discover_weekly?.images[0].url} alt=\"\" />\n            <div className=\"Playlist-infoText\">\n              <strong>PLAYLIST</strong>\n              <h2>Lenny's {discover_weekly?.name}</h2>\n              <p>{discover_weekly?.description}</p>\n            </div>\n          </div>\n\n          <section>\n            <PlaylistControls />\n            <div className=\"Playlist-songList\">\n              <table>\n                <thead>\n                  <tr>\n                    <th>#</th>\n                    <th>TITLE</th>\n                    <th>ALBUM</th>\n                    <th>DATE ADDED</th>\n                    <th>\n                      <AccessTimeIcon />\n                    </th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {discover_weekly?.tracks?.items.map((trackData, id) => (\n                    <tr\n                      key={id}\n                      onClick={() => {\n                        setSong({\n                          image: trackData.track.album.images[1].url,\n                          name: trackData.track.name,\n                          artist_name: trackData.track.artists[0].name,\n                          duration_ms: trackData.track.duration_ms,\n                          added_at: trackData.added_at\n                        });\n                      }}\n                    >\n                      <td>{id + 1}</td>\n                      <td>\n                        <div className=\"Song-info\">\n                          <div className=\"Song-img\">\n                            <img\n                              className=\"Song-albumImg\"\n                              src={trackData.track.album.images[1].url}\n                              alt=\"\"\n                            />\n                          </div>\n                          <div className=\"Song-credits\">\n                            <h3>\n                              <span>{trackData.track.name}</span>\n                            </h3>\n                            <p>\n                              <span>\n                                {trackData.track.artists\n                                  .map(artist => artist.name)\n                                  .join(', ')}\n                              </span>\n                            </p>\n                          </div>\n                        </div>\n                      </td>\n                      <td>{trackData.track.album.name}</td>\n                      <td>\n                        {daysAgo(trackData.added_at, new Date()) > 0\n                          ? daysAgo(trackData.added_at, new Date())\n                          : null}{' '}\n                        {days(daysAgo(trackData.added_at, new Date()))}\n                      </td>\n                      <td>{getSongDuration(trackData.track.duration_ms)}</td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          </section>\n        </div>\n      </div>\n\n      <Footer />\n    </>\n  );\n};\n\nexport default Playlist;\n","import React from 'react';\nimport Header from '../components/header/Header';\nimport Sidebar from '../components/sidebar/Sidebar';\nimport Footer from '../components/footer/Footer';\nimport './NotFound404.css';\n\nimport NewReleasesRoundedIcon from '@material-ui/icons/NewReleasesRounded';\n\n/** 404 redirect for missing urls or lost routes\n *\n * App -> Routes -> NotFound404\n */\n\nconst NotFound404 = () => {\n  return (\n    <>\n      <div className=\"NotFound\">\n        <Sidebar />\n        <div className=\"NotFound-body\">\n          <Header />\n          <div className=\"NotFound-content\">\n            <NewReleasesRoundedIcon className=\"NotFound-icon\" />\n            <h1>404: Page Not Found</h1>\n            <p>What you were looking for is just not there.</p>\n          </div>\n        </div>\n      </div>\n      <Footer />\n    </>\n  );\n};\n\nexport default NotFound404;\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\n\nimport Login from './pages/Login';\nimport Home from './pages/Home';\nimport Search from './pages/Search';\nimport Library from './pages/Library';\nimport Playlist from './pages/Playlist';\nimport DiscoverPlaylist from './pages/DiscoverPlaylist';\nimport NotFound404 from './pages/NotFound404';\n\n/** Site-wide routes.\n *\n * Visiting a non-existant route redirects to the homepage.\n */\nconst Routes = () => {\n  return (\n    <Switch>\n      <Route exact path=\"/welcome\">\n        <Login />\n      </Route>\n\n      <Route exact path=\"/\">\n        <Home />\n      </Route>\n\n      <Route exact path=\"/search\">\n        <Search />\n      </Route>\n\n      <Route path=\"/library\">\n        <Library />\n      </Route>\n\n      <Route exact path=\"/playlist/discover\">\n        <DiscoverPlaylist />\n      </Route>\n\n      <Route exact path=\"/playlists/:handle\">\n        <Playlist />\n      </Route>\n\n      <Route>\n        <NotFound404 />\n      </Route>\n    </Switch>\n  );\n};\n\nexport default Routes;\n","import React, { useEffect, useState } from 'react';\nimport { useStateValue } from './StateProvider';\nimport { BrowserRouter } from 'react-router-dom';\nimport useSessionStorage from './common/useSessionStorage';\nimport UserContext from './UserContext';\n// import { getParamsFromUrl } from './common/auth';\nimport SpotifyWebApi from 'spotify-web-api-js';\nimport SpotifyCloneApi from './common/api';\nimport Routes from './Routes';\n\n/** Connect Spotify API to our React App.\n *\n * - useSessionStorage: locally stores parameters that are received from Spotify API login\n *\n * App -> Routes\n */\n\nconst spotify = new SpotifyWebApi();\n\nconst App = () => {\n  const [\n    {\n      // user,\n      token\n      // searchTerm,\n      // searchResults,\n      // isPlaying,\n      // playerTime,\n      // volume,\n      // playlists,\n      // artists,\n      // albums,\n      // trackData,\n      // discover_weekly\n    },\n    dispatch\n  ] = useStateValue();\n  const [accessToken, setAccessToken] = useSessionStorage(\n    'spotify_access_token'\n  );\n  const [timestamp, setTimestamp] = useSessionStorage('spotify_timestamp');\n  const [infoLoaded, setInfoLoaded] = useState(false);\n\n  // console.debug('App','user',user,'token',token,'searchTerm',searchTerm,'searchResults',searchResults,'isPlaying',isPlaying,'playerTime',playerTime,'volume', volume, 'playlists', playlists, 'artists', artists, 'albums', albums, 'trackData', trackData, 'discover_weekly', discover_weekly);\n\n  /** Runs when app component loads and every time variable changes */\n  useEffect(() => {\n    /** Fetch data from the Spotify API and Postgres database */\n    const fetchData = () => {\n      try {\n        /** INFORMATION RECEIVED FROM SPOTIFY AUTH *******************\n         */\n        if (accessToken || token) {\n          /** adds/updates values if not in storage\n           * prevents reset on refresh\n           */\n          if (!timestamp) setTimestamp(Date.now());\n\n          /** SET TOKEN TO GLOBAL STATE */\n          dispatch({\n            type: 'SET_TOKEN',\n            token: accessToken || token\n          });\n          // setAccessToken(accessToken); // save token to sessionStorage\n          spotify.setAccessToken(accessToken || token); // set token for Spotify API access\n\n          /** GET USER'S ACCOUNT INFO **************************/\n          // spotify.getMe().then(user => {\n          //   dispatch({\n          //     type: 'SET_USER',\n          //     user: user\n          //   });\n          //   // store user id, name, and profile photo into database\n          //   logNewUser(user);\n          // });\n\n          /** GET LENNY'S DISCOVER PLAYLIST **************************/\n          spotify.getPlaylist('37i9dQZEVXcUfolfIkR1hC').then(response => {\n            dispatch({\n              type: 'SET_DISCOVER_WEEKLY',\n              discover_weekly: response\n            });\n          });\n        }\n\n        /** GET PLAYLISTS FROM POSTGRES DB **************************/\n        SpotifyCloneApi.getPlaylists().then(playlists => {\n          dispatch({\n            type: 'SET_PLAYLISTS',\n            playlists: playlists\n          });\n        });\n\n        /** GET ARTISTS FROM POSTGRES DB **************************/\n        SpotifyCloneApi.getArtists().then(artists => {\n          dispatch({\n            type: 'SET_ARTISTS',\n            artists: artists\n          });\n        });\n\n        /** GET ALBUMS FROM POSTGRES DB **************************/\n        SpotifyCloneApi.getAlbums().then(albums => {\n          dispatch({\n            type: 'SET_ALBUMS',\n            albums: albums\n          });\n        });\n      } catch (err) {\n        console.error(err);\n      }\n      setInfoLoaded(true);\n    };\n    setInfoLoaded(false);\n    fetchData();\n  }, [token, infoLoaded, dispatch, accessToken, setTimestamp, timestamp]);\n\n  /** Handles milliseconds to minutes:seconds conversion.\n   * https://stackoverflow.com/a/21294619\n   */\n  const getSongDuration = ms => {\n    let minutes = Math.floor(ms / 60000);\n    let seconds = ((ms % 60000) / 1000).toFixed(0);\n    return minutes + ':' + (seconds < 10 ? '0' : '') + seconds;\n  };\n\n  /** Calculates days since song was added to playlist.\n   * https://stackoverflow.com/a/4929629\n   */\n  const daysAgo = (dateAdded, currentDate) => {\n    const date1 = new Date(dateAdded);\n    const date2 = currentDate;\n\n    const oneDay = 1000 * 60 * 60 * 24; // One day in milliseconds\n    const diffInTime = date2.getTime() - date1.getTime(); // Calculating the time difference between two dates\n    const diffInDays = Math.round(diffInTime / oneDay); // Calculating the no. of days between two dates\n\n    return diffInDays;\n  };\n\n  /** Triggered by search form submit\n   * renders results on pages > Search.js\n   */\n  async function searchFor(searchTerm) {\n    try {\n      // get search results\n      const results = await spotify.searchTracks(searchTerm);\n      dispatch({\n        type: 'SET_SEARCH_RESULTS',\n        searchResults: results\n      });\n    } catch (err) {\n      console.error(err);\n    }\n  }\n\n  /**\n   * Clear out all sessionStorage items we've set and reload the page\n   */\n  const logout = async () => {\n    try {\n      await dispatch({\n        type: 'SET_TOKEN',\n        token: null\n      });\n    } catch (err) {\n      throw new Error(err);\n    } finally {\n      sessionStorage.clear();\n      // window.location.reload();\n    }\n  };\n\n  if (!infoLoaded) {\n    return 'Loading...';\n  }\n\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n        <UserContext.Provider\n          value={{ getSongDuration, daysAgo, searchFor, logout }}\n        >\n          <Routes />\n        </UserContext.Provider>\n      </BrowserRouter>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const INITIAL_STATE = {\n  user: null,\n  token: sessionStorage.getItem('spotify_access_token') || null,\n  searchTerm: '',\n  searchResults: [],\n  isPlaying: false,\n  isShuffling: false,\n  isRepeated: false,\n  playerTime: 0,\n  volume: sessionStorage.getItem('unMuteVariable') || 50,\n  playlists: [],\n  artists: [],\n  albums: [],\n  trackData: null,\n  discover_weekly:\n    JSON.parse(sessionStorage.getItem('spotify_discover_weekly_data')) || []\n};\n\n/** Listens to actions and stores data as global variables\n *\n * - sessionStorage: locally stores parameters that are received from Spotify API login\n *\n * StateProvider -> reducer\n * https://beta.reactjs.org/reference/react/useReducer\n */\n\nconst reducer = (state = INITIAL_STATE, action) => {\n  console.log(action);\n\n  //   action -> type, [payload]\n\n  switch (action.type) {\n    case 'SET_USER':\n      return {\n        // new state -> keep current state, update declared state\n        ...state,\n        user: action.user\n      };\n\n    case 'SET_TOKEN':\n      return {\n        ...state,\n        token: action.token\n      };\n\n    case 'SET_SEARCHTERM':\n      return {\n        ...state,\n        searchTerm: action.searchTerm\n      };\n\n    case 'SET_SEARCH_RESULTS':\n      return {\n        ...state,\n        searchResults: action.searchResults\n      };\n\n    case 'SET_PLAYING':\n      return {\n        ...state,\n        isPlaying: action.isPlaying\n      };\n\n    case 'SET_SHUFFLING':\n      return {\n        ...state,\n        isShuffling: action.isShuffling\n      };\n\n    case 'SET_REPEATED':\n      return {\n        ...state,\n        isRepeated: action.isRepeated\n      };\n\n    case 'SET_SONG':\n      return {\n        ...state,\n        trackData: action.trackData\n      };\n\n    case 'SET_PLAYER_TIMELINE':\n      return {\n        ...state,\n        playerTime: action.playerTime\n      };\n\n    case 'SET_VOLUME':\n      return {\n        ...state,\n        volume: action.volume\n      };\n\n    case 'SET_PLAYLISTS':\n      return {\n        ...state,\n        playlists: action.playlists\n      };\n\n    case 'SET_ARTISTS':\n      return {\n        ...state,\n        artists: action.artists\n      };\n\n    case 'SET_ALBUMS':\n      return {\n        ...state,\n        albums: action.albums\n      };\n\n    case 'SET_DISCOVER_WEEKLY':\n      return {\n        ...state,\n        discover_weekly: action.discover_weekly\n      };\n\n    // if no matching action, return original state\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { StateProvider } from './StateProvider';\nimport reducer, { INITIAL_STATE } from './common/reducer';\n\nReactDOM.render(\n  <StateProvider initialState={INITIAL_STATE} reducer={reducer}>\n    <App />\n  </StateProvider>,\n  document.getElementById('root') // DOM node to render the component to\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}